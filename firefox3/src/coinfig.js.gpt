(async () => {
    const jsNotif = (m, d) => {
        const t = document.createElement("div");
        t.style.cssText =
            "position:fixed;top:10%;left:0;background-color:rgba(0,0,0,.8);border-radius:4px;padding:16px;color:#fff;font:calc(14px + .5vw) 'Arial',sans-serif;font-weight:bold;text-transform:uppercase;letter-spacing:1px;z-index:9999;transition:all 1s;animation:slideIn 1s forwards";
        t.innerHTML = m;
        document.body.appendChild(t);

        const o = document.createElement("style");
        o.innerHTML =
            "@keyframes slideIn{0%{transform:translateX(-100%)}100%{transform:translateX(0)}}@keyframes slideOut{0%{transform:translateX(0)}100%{transform:translateX(100%)}}";
        document.head.appendChild(o);

        setTimeout(() => {
            t.style.animation = "slideOut 1s forwards";
            setTimeout(() => {
                document.body.removeChild(t);
            }, 1000);
        }, d || 3000);
    };

    if (
        location.search.startsWith("?apikey=") &&
        location.href.startsWith("https://config.nocaptchaai.com")
    ) {
        try {
            const params = new URLSearchParams(window.location.search);
            const APIKEY = params.get("apikey") || null;
            const PLANTYPE = params.get("plan") || null;
            const customEndpoint = params.get("endpoint") || null;

            const defaultConfigs = {
                // Global
                APIKEY: null,
                PLANTYPE: null,
                customEndpoint: null,
                hCaptchaEnabled: true,
                reCaptchaEnabled: true,
                dataDomeEnabled: true,
                ocrEnabled: true,
                extensionEnabled: true,
                logsEnabled: false,
                fastAnimationMode: true,
                debugMode: false,
                // hCaptcha
                hCaptchaAutoOpen: true,
                hCaptchaAutoSolve: true,
                hCaptchaGridSolveTime: 7, // seconds
                hCaptchaMultiSolveTime: 5, // seconds
                hCaptchaBoundingBoxSolveTime: 5, // seconds
                hCaptchaAlwaysSolve: true,
                englishLanguage: true,
                // reCaptcha
                reCaptchaAutoOpen: true,
                reCaptchaAutoSolve: true,
                reCaptchaAlwaysSolve: true,
                reCaptchaClickDelay: 400, // milliseconds
                reCaptchaSubmitDelay: 1, // seconds
                reCaptchaSolveType: "image", // for default audio use "audio"
            };

            const mergedConfigs = {
                ...defaultConfigs,
                APIKEY: APIKEY || defaultConfigs.APIKEY,
                PLANTYPE: PLANTYPE || defaultConfigs.PLANTYPE,
                customEndpoint: customEndpoint || defaultConfigs.customEndpoint,
            };

            await browser.storage.sync.set(mergedConfigs);
            const settings = await browser.storage.sync.get();
            console.table(settings);

            if (!settings.APIKEY) {
                jsNotif("Empty API key");
            } else {
                const getEndpointURL =
                    "https://manage.nocaptchaai.com/api/user/get_endpoint";
                const res = await fetch(getEndpointURL, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        apikey: settings.APIKEY,
                    },
                });
                const data = await res.json();

                if (data.error) {
                    jsNotif(
                        `${data.error}\nnoCaptchaAi Extension Config failed ✘`
                    );
                    await browser.storage.sync.set({ APIKEY: null });
                } else if (data.plan === "free") {
                    jsNotif("noCaptchaAi Extension\nConfig Successful ✔️");

                    const iframes = [
                        ...document.querySelectorAll("[src*=newassets]"),
                    ];
                    for (const iframe of iframes) {
                        const url = iframe.src;
                        iframe.src = "about:blank";
                        setTimeout(() => {
                            iframe.src = url;
                        }, 10);
                    }
                } else if (
                    ["daily", "unlimited", "wallet"].includes(data.plan)
                ) {
                    if (data.custom) {
                        await browser.storage.sync.set({
                            PLANTYPE: "custom",
                            customEndpoint: data.custom.includes(customEndpoint)
                                ? customEndpoint
                                : data.custom[0],
                        });
                        jsNotif(
                            "noCaptchaAi Extension Custom plan\nConfig Successful ✔️"
                        );
                        return;
                    }
                    await browser.storage.sync.set({ PLANTYPE: "pro" });
                    jsNotif(
                        `noCaptchaAi Extension ${data.plan} plan\nConfig Successful ✔️`
                    );
                }
            }
        } catch (error) {
            console.error(error);
            jsNotif("An error occurred. Please try again.", 5000);
        }
    }
})();
